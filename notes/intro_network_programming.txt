Want to store the 2-byte hex number: b34f

If want to store the bytes in Big-Endian (Network Byte Order):
b3 4f

If want to store in Little-Endian (mostly Intel):
4f b3

Host Byte Order: the byte order the host is using.
Assume that Host Byte Order isn't right, alway run alue through a function to set it to Network Byte Order
32-bit systems (for floating point, 64-bit, look up Serialization):

2 types of numbers you can convert: short(2 byte), long(4 byte)
Function:
--nomenclature
"h" for "host"
"to"
"n" for network
"s" for short/ "l" for long

htons() host to network short
htonl() host to network long
ntohs() network to host short
ntohl() network to host long

Outgoing data:
Before sending out data to wire:
use htons/htonl

Incoming data:
When reading in data from the wire:
use ntohs/ntohl

===

struct addrinfo {
  int			ai_flags;	
  int			ai_family;	//IPv4, IPv6
  int 			ai_socktype;	//SOCK_STREAM, SOCK_DGRAM
  int 			ai_protocol;	//use 0 for "any"
  size_t		ai_addrlen; 	//size of ai_addr in bytes
  struct sockaddr	*ai_addr;	//struct sockaddr_in or _in6
  char			*ai_canonname;	//full canonical hostname
  
  struct addrinfo 	*ai_next;	//linked list, next node
}

Some structs are either IPv4, IPv6, or both.
When call getaddrinfo(), get a pointer to a new linked list of this.

//general use case
//16 bytes
struct sockaddr {
  unsigned short	sa_family; 	//address family, IPv4 (AF_INET), IPv6, etc.
  char			sa_data[14]; 	//14 bytes of protocol address. destination address and port number
}

  //for IPv4 (can be cast as sockaddr)
  //16 bytes
  struct sockaddr_in {
    short int		sin_family; 	//Address family, AF_INET (for IPv4)
    unsigned short int	sin_port;	//Port number 
    struct in_addr	sin_addr;	//IPv4 address
    unsigned char	sin_zero[8];	//Padding. Same size as struct sockaddr
  }
  
  Note: sin_zero must be set to all zeros using function memset()
  sin_family must be set to "AF_INET" (corresponds to sa_family in sockaddr)
  sin_port must by in Network Byte Order (use htons())
  sin_addr is a struct in_addr. (for historical reasons)
  
  struct in_addr {
    uint32_t s_addr; //IPv4 address, 32-bit int (4 bytes)
  };


  //for IPv6 (can be cast as sockaddr)
  //16 bytes
  struct sockaddr_in6 {
    u_int16_t 		sin6_family;	//address family, AF_INET6
    u_int16_t		sin6_port;	//port number, Network Byte Order
    u_int32_t		sin6_flowinfo;	//IPv6 flow info
    struct in6_addr	sin6_addr;	//IPv6 address
    u_int32_t		sin6_scope_id;	//Scope ID
  }
  
  struct in_addr6 {
    unsigned char	s6_addr[16];	//IPv6 address
  };

connect(sockaddr* )


==

Some function calls (in approximate order of use in normal program flow)
getaddrinfo()

// ref: http://linux.die.net/man/3/getaddrinfo
// returns 0 if success
// else NONZERO error codes
int getaddrinfo(const char *node,		// e.g. "www.example.com" or IP
		const char *service,		// e.g. "http" or port number e.g. "80"
		const struct addrinfo *hints,	//specifies to getaddrinfo what kind of addreses to return
		struct addrinfo **res);


// converts network address structure from binary to text form
// resulting string is copied into a buffer pointed to by dst (a non-NULL pointer)
// size: number of bytes available in the buffer
// af: address family
const char *inet_ntop(int af, const void *src, *dst, socklen_t size);
